<launch>

    <!-- the main entry point for the rover's autonomy software stack
         handles the bringup of (hopefully) every node and service we need for full funcitonality
    -->

    <!-- configure args -->
    <arg name="robot" default="rover_v3"/>
    <arg name="robot_desc" default="$(find rover_sim)/models/$(arg robot)/model.urdf" />
    <arg name="nav" default="true" />
    <arg name="rviz" default="true"/>   <!-- use rviz window for robot information -->
    <arg name="rviz_cfg" default="$(find rover_sim)/rviz/rover_v1.rviz" />

    <!-- load robot description to parameter server (for robot_state_publisher) -->
    <param name="robot_description" textfile="$(arg robot_desc)" />

    <!-- use robot description to publish robot tf tree -->
    <!-- tf_prefix: robot tf transforms are prepended with bowser2 to match model.sdf plugin convention-->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <param name="tf_prefix" type="string" value=""/>
    </node>

    <!-- launches rviz with specified configuration (if CLI arg is true)-->
    <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_cfg)"/>

    <!-- IMU -->
    <node name="imu_node" pkg="rover_hw_nodes" type="imx219_stereo_cam_node" output="screen" />
    <!-- stereo camera -->
    <include file="$(find rover_hw_nodes)/launch/cam.launch">
    </include>
    
    <!-- pico_bridge -->
    <include file="$(find rover_bringup)/launch/bridge.launch">
        <arg name="gps_topic" value="/rover/fix"/>
    </include>

    <!-- telemetry -->
    <node name="telemetry_pub" pkg="rover_bringup" type="telemetry_pub.py" output="screen" />

    <!-- logging -->
    <include file="$(find rover_bringup)/launch/logging.launch" >
        <arg name="filename" value="main"/>
        <!-- <arg name="location" value="" /> -->
    </include>

</launch>